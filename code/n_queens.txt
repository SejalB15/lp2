#include <iostream>
#include <vector>
using namespace std;

bool isSafe(int row, int col, vector<int>& board, int n) {
    for (int i = 0; i < row; i++) {
        // Check same column
        if (board[i] == col)
            return false;

        // Check diagonals
        if (abs(board[i] - col) == abs(i - row))
            return false;
    }
    return true;
}

void printSolution(vector<int>& board, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i] == j)
                cout << "Q ";
            else
                cout << ". ";
        }
        cout << endl;
    }
    cout << "------------------\n";
}

void solveNQueens(int row, vector<int>& board, int n, int& count) {
    if (row == n) {
        count++;
        printSolution(board, n);  // Print each solution
        return;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(row, col, board, n)) {
            board[row] = col;
            solveNQueens(row + 1, board, n, count);  // Recur for next row
            // backtrack (no need to reset value, it will be overwritten)
        }
    }
}

int main() {
    int n;
    cout << "Enter number of queens (N): ";
    cin >> n;

    vector<int> board(n);  // board[i] = column position of queen in row i
    int count = 0;

    solveNQueens(0, board, n, count);
    cout << "Total solutions: " << count << endl;

    return 0;
}
